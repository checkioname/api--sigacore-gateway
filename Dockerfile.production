# =============================================================================
# Gateway/Auth Service - Dockerfile para Produção
# =============================================================================

# Estágio 1: Builder
FROM golang:1.22-alpine AS builder

# Instalar dependências do sistema
RUN apk add --no-cache git ca-certificates tzdata

# Configurar timezone
RUN cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências primeiro (para cache do Docker)
COPY go.mod go.sum ./

# Download das dependências
RUN go mod download
RUN go mod verify

# Copiar código fonte
COPY . .

# Compilar aplicação
# CGO_ENABLED=0: Compilação estática (sem dependências C)
# GOOS=linux: Sistema operacional alvo
# -ldflags: Flags de link para otimização
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o gateway \
    ./cmd/main.go

# =============================================================================
# Estágio 2: Imagem Final (Runtime)
# =============================================================================

FROM alpine:latest

# Instalar certificados SSL e timezone
RUN apk --no-cache add ca-certificates tzdata

# Configurar timezone para São Paulo
RUN cp /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
RUN echo "America/Sao_Paulo" > /etc/timezone

# Criar usuário não-root para segurança
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Criar diretórios necessários
WORKDIR /app

# Copiar binário do estágio builder
COPY --from=builder /app/gateway .

# Copiar certificados SSL
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Alterar ownership para usuário não-root
RUN chown -R appuser:appgroup /app

# Mudar para usuário não-root
USER appuser

# Configurar variáveis de ambiente padrão
ENV ENVIRONMENT=production
ENV GIN_MODE=release
ENV TZ=America/Sao_Paulo

# Expor porta da aplicação
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Comando para executar a aplicação
CMD ["./gateway"]

