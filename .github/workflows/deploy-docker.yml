name: Deploy Gateway with Docker to EC2

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Run tests
      run: |
        go mod tidy
        go test ./...

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy Gateway to EC2
      run: |
        # Criar diretório no EC2
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          sudo mkdir -p /opt/sigacore-gateway
          sudo chown ${{ secrets.EC2_USER }}:${{ secrets.EC2_USER }} /opt/sigacore-gateway
        "
        
        # Enviar código para EC2
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='bin/' \
          --exclude='*.log' \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/opt/sigacore-gateway/
        
        # Executar deploy com Docker no EC2
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          cd /opt/sigacore-gateway
          
          # Instalar Docker se não existir
          if ! command -v docker &> /dev/null; then
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ${{ secrets.EC2_USER }}
          fi
          
          # Instalar Docker Compose se não existir
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Criar arquivo .env
          cat > .env << EOF
DB_HOST=${{ secrets.DB_HOST }}
DB_PORT=${{ secrets.DB_PORT }}
DB_USER=${{ secrets.DB_USER }}
DB_PASSWORD=${{ secrets.DB_PASSWORD }}
DB_NAME=${{ secrets.DB_NAME }}
JWT_SECRET=${{ secrets.JWT_SECRET }}
SIGACORE_SERVICE_URL=${{ secrets.SIGACORE_SERVICE_URL }}
SIGADOCS_SERVICE_URL=${{ secrets.SIGADOCS_SERVICE_URL }}
EOF
          
          # Parar containers anteriores
          docker-compose -f docker-compose.production.yml down || true
          
          # Remover imagens antigas
          docker image prune -f
          
          # Build e start dos containers
          docker-compose -f docker-compose.production.yml up -d --build
          
          # Aguardar inicialização
          sleep 30
        "

    - name: Health Check
      run: |
        # Verificar se o container está rodando
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          docker-compose -f /opt/sigacore-gateway/docker-compose.production.yml ps
        "
        
        # Testar endpoint de saúde
        for i in {1..10}; do
          if curl -f http://${{ secrets.EC2_HOST }}:8080/health; then
            echo '✅ Gateway está funcionando!'
            exit 0
          fi
          echo 'Tentativa '$i' de 10, aguardando...'
          sleep 15
        done
        
        echo '❌ Gateway não respondeu após 10 tentativas'
        
        # Mostrar logs para debug
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          cd /opt/sigacore-gateway
          echo '=== LOGS DO CONTAINER ==='
          docker-compose -f docker-compose.production.yml logs --tail=50
        "
        
        exit 1

    - name: Show deployment info
      if: success()
      run: |
        echo "🎉 Deploy do Gateway realizado com sucesso!"
        echo "🌐 Gateway disponível em: http://${{ secrets.EC2_HOST }}:8080"
        echo "📊 Status dos containers:"
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          docker-compose -f /opt/sigacore-gateway/docker-compose.production.yml ps
        "
